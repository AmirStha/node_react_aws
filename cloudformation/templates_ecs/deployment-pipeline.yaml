---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Cluster:
    Type: String

  Service:
    Type: String

  CustomDeploymentTriggerBranch:
    Type: String
    Description: "The branch that is to be used for CodeBuild"
    Default: "staging"

  BitNodeToken:
    Type: String
    Description: "Bit node token"
  
  TeamName:
    Type: String
    Description: "Team deploying the stack"
    Default: "test"

  AWSUserName:
    Type: String
    Description: "The user for principal aws ecr repo policy document"
    Default: "amir"

  CustomContainerName:
    Type: String
    Default: "ecs-container-app"

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "user"
          Value: !Sub ${AWSUserName}
        - Key: "team"
          Value: !Sub ${TeamName}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub
                  - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepoName}
                  - ECRRepoName: !ImportValue BottleECRRepoName
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "user"
          Value: !Sub ${AWSUserName}
        - Key: "team"
          Value: !Sub ${TeamName}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:CancelUploadArchive"
                Resource: "*"
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                Resource: "*"

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Tags:
        - Key: "user"
          Value: !Sub ${AWSUserName}
        - Key: "team"
          Value: !Sub ${TeamName}
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        # The downloaded source code for the build will come from CodePipeline
        Type: CODEPIPELINE
        Name: !Sub ${AWS::StackName}Project
      Source:
        Type: CODEPIPELINE
      Environment:
        # Linux container with node installed
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/docker:17.09.0"
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: BitNodeToken
            Type: PLAINTEXT
            Value: !Ref BitNodeToken
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: CustomContainerName
            Value: !Sub ${CustomContainerName}
          - Name: REPOSITORY_URI
            Value: !Sub
              - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}
              - ECRRepoName: !ImportValue BottleECRRepoName
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec.docker_ecr.yaml"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Tags:
        - Key: "user"
          Value: !Sub ${AWSUserName}
        - Key: "team"
          Value: !Sub ${TeamName}
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}App
              Configuration:
                RepositoryName: !ImportValue BottleCodeCommitNodeReactRepoName
                BranchName: !Ref CustomDeploymentTriggerBranch
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: !Sub ${AWS::StackName}App
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref Cluster
                ServiceName: !Ref Service
                FileName: images.json
              InputArtifacts:
                - Name: !Sub ${AWS::StackName}BuildOutput
              RunOrder: 1

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
